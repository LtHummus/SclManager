/**
 * This class is generated by jOOQ
 */
package zzz.generated.tables.records


import java.lang.String

import javax.annotation.Generated

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Row1
import org.jooq.impl.UpdatableRecordImpl

import scala.Array

import zzz.generated.tables.Division


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.2"
  ),
  comments = "This class is generated by jOOQ"
)
class DivisionRecord extends UpdatableRecordImpl[DivisionRecord](Division.DIVISION) with Record1[String] {

  /**
   * Setter for <code>scl.division.name</code>.
   */
  def setName(value : String) : Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>scl.division.name</code>.
   */
  def getName : String = {
    val r = get(0)
    if (r == null) null else r.asInstanceOf[String]
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------
  override def key() : Record1[String] = {
    return super.key.asInstanceOf[ Record1[String] ]
  }

  // -------------------------------------------------------------------------
  // Record1 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow : Row1[String] = {
    super.fieldsRow.asInstanceOf[ Row1[String] ]
  }

  override def valuesRow : Row1[String] = {
    super.valuesRow.asInstanceOf[ Row1[String] ]
  }
  override def field1 : Field[String] = Division.DIVISION.NAME
  override def value1 : String = getName

  override def value1(value : String) : DivisionRecord = {
    setName(value)
    this
  }

  override def values(value1 : String) : DivisionRecord = {
    this.value1(value1)
    this
  }

  /**
   * Create a detached, initialised DivisionRecord
   */
  def this(name : String) = {
    this()

    set(0, name)
  }
}
