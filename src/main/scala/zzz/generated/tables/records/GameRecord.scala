/**
 * This class is generated by jOOQ
 */
package zzz.generated.tables.records


import java.lang.Integer
import java.lang.String

import javax.annotation.Generated

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl

import scala.Array

import zzz.generated.tables.Game


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.2"
  ),
  comments = "This class is generated by jOOQ"
)
class GameRecord extends UpdatableRecordImpl[GameRecord](Game.GAME) with Record8[Integer, Integer, Integer, Integer, Integer, Integer, String, String] {

  /**
   * Setter for <code>scl.game.id</code>.
   */
  def setId(value : Integer) : Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>scl.game.id</code>.
   */
  def getId : Integer = {
    val r = get(0)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>scl.game.spy</code>.
   */
  def setSpy(value : Integer) : Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>scl.game.spy</code>.
   */
  def getSpy : Integer = {
    val r = get(1)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>scl.game.sniper</code>.
   */
  def setSniper(value : Integer) : Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>scl.game.sniper</code>.
   */
  def getSniper : Integer = {
    val r = get(2)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>scl.game.match</code>.
   */
  def setMatch(value : Integer) : Unit = {
    set(3, value)
  }

  /**
   * Getter for <code>scl.game.match</code>.
   */
  def getMatch : Integer = {
    val r = get(3)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>scl.game.result</code>.
   */
  def setResult(value : Integer) : Unit = {
    set(4, value)
  }

  /**
   * Getter for <code>scl.game.result</code>.
   */
  def getResult : Integer = {
    val r = get(4)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>scl.game.sequence</code>.
   */
  def setSequence(value : Integer) : Unit = {
    set(5, value)
  }

  /**
   * Getter for <code>scl.game.sequence</code>.
   */
  def getSequence : Integer = {
    val r = get(5)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>scl.game.level</code>.
   */
  def setLevel(value : String) : Unit = {
    set(6, value)
  }

  /**
   * Getter for <code>scl.game.level</code>.
   */
  def getLevel : String = {
    val r = get(6)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>scl.game.gameType</code>.
   */
  def setGametype(value : String) : Unit = {
    set(7, value)
  }

  /**
   * Getter for <code>scl.game.gameType</code>.
   */
  def getGametype : String = {
    val r = get(7)
    if (r == null) null else r.asInstanceOf[String]
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------
  override def key() : Record1[Integer] = {
    return super.key.asInstanceOf[ Record1[Integer] ]
  }

  // -------------------------------------------------------------------------
  // Record8 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow : Row8[Integer, Integer, Integer, Integer, Integer, Integer, String, String] = {
    super.fieldsRow.asInstanceOf[ Row8[Integer, Integer, Integer, Integer, Integer, Integer, String, String] ]
  }

  override def valuesRow : Row8[Integer, Integer, Integer, Integer, Integer, Integer, String, String] = {
    super.valuesRow.asInstanceOf[ Row8[Integer, Integer, Integer, Integer, Integer, Integer, String, String] ]
  }
  override def field1 : Field[Integer] = Game.GAME.ID
  override def field2 : Field[Integer] = Game.GAME.SPY
  override def field3 : Field[Integer] = Game.GAME.SNIPER
  override def field4 : Field[Integer] = Game.GAME.MATCH
  override def field5 : Field[Integer] = Game.GAME.RESULT
  override def field6 : Field[Integer] = Game.GAME.SEQUENCE
  override def field7 : Field[String] = Game.GAME.LEVEL
  override def field8 : Field[String] = Game.GAME.GAMETYPE
  override def value1 : Integer = getId
  override def value2 : Integer = getSpy
  override def value3 : Integer = getSniper
  override def value4 : Integer = getMatch
  override def value5 : Integer = getResult
  override def value6 : Integer = getSequence
  override def value7 : String = getLevel
  override def value8 : String = getGametype

  override def value1(value : Integer) : GameRecord = {
    setId(value)
    this
  }

  override def value2(value : Integer) : GameRecord = {
    setSpy(value)
    this
  }

  override def value3(value : Integer) : GameRecord = {
    setSniper(value)
    this
  }

  override def value4(value : Integer) : GameRecord = {
    setMatch(value)
    this
  }

  override def value5(value : Integer) : GameRecord = {
    setResult(value)
    this
  }

  override def value6(value : Integer) : GameRecord = {
    setSequence(value)
    this
  }

  override def value7(value : String) : GameRecord = {
    setLevel(value)
    this
  }

  override def value8(value : String) : GameRecord = {
    setGametype(value)
    this
  }

  override def values(value1 : Integer, value2 : Integer, value3 : Integer, value4 : Integer, value5 : Integer, value6 : Integer, value7 : String, value8 : String) : GameRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this.value4(value4)
    this.value5(value5)
    this.value6(value6)
    this.value7(value7)
    this.value8(value8)
    this
  }

  /**
   * Create a detached, initialised GameRecord
   */
  def this(id : Integer, spy : Integer, sniper : Integer, `match` : Integer, result : Integer, sequence : Integer, level : String, gametype : String) = {
    this()

    set(0, id)
    set(1, spy)
    set(2, sniper)
    set(3, `match`)
    set(4, result)
    set(5, sequence)
    set(6, level)
    set(7, gametype)
  }
}
