/**
 * This class is generated by jOOQ
 */
package zzz.generated.tables.records


import java.lang.Integer
import java.lang.String

import javax.annotation.Generated

import org.jooq.Field
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.TableRecordImpl

import scala.Array

import zzz.generated.tables.HomeMaps


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.2"
  ),
  comments = "This class is generated by jOOQ"
)
class HomeMapsRecord extends TableRecordImpl[HomeMapsRecord](HomeMaps.HOME_MAPS) with Record4[Integer, String, String, String] {

  /**
   * Setter for <code>scl.home_maps.week</code>.
   */
  def setWeek(value : Integer) : Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>scl.home_maps.week</code>.
   */
  def getWeek : Integer = {
    val r = get(0)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>scl.home_maps.level</code>.
   */
  def setLevel(value : String) : Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>scl.home_maps.level</code>.
   */
  def getLevel : String = {
    val r = get(1)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>scl.home_maps.loadout</code>.
   */
  def setLoadout(value : String) : Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>scl.home_maps.loadout</code>.
   */
  def getLoadout : String = {
    val r = get(2)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>scl.home_maps.picker</code>.
   */
  def setPicker(value : String) : Unit = {
    set(3, value)
  }

  /**
   * Getter for <code>scl.home_maps.picker</code>.
   */
  def getPicker : String = {
    val r = get(3)
    if (r == null) null else r.asInstanceOf[String]
  }

  // -------------------------------------------------------------------------
  // Record4 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow : Row4[Integer, String, String, String] = {
    super.fieldsRow.asInstanceOf[ Row4[Integer, String, String, String] ]
  }

  override def valuesRow : Row4[Integer, String, String, String] = {
    super.valuesRow.asInstanceOf[ Row4[Integer, String, String, String] ]
  }
  override def field1 : Field[Integer] = HomeMaps.HOME_MAPS.WEEK
  override def field2 : Field[String] = HomeMaps.HOME_MAPS.LEVEL
  override def field3 : Field[String] = HomeMaps.HOME_MAPS.LOADOUT
  override def field4 : Field[String] = HomeMaps.HOME_MAPS.PICKER
  override def value1 : Integer = getWeek
  override def value2 : String = getLevel
  override def value3 : String = getLoadout
  override def value4 : String = getPicker

  override def value1(value : Integer) : HomeMapsRecord = {
    setWeek(value)
    this
  }

  override def value2(value : String) : HomeMapsRecord = {
    setLevel(value)
    this
  }

  override def value3(value : String) : HomeMapsRecord = {
    setLoadout(value)
    this
  }

  override def value4(value : String) : HomeMapsRecord = {
    setPicker(value)
    this
  }

  override def values(value1 : Integer, value2 : String, value3 : String, value4 : String) : HomeMapsRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this.value4(value4)
    this
  }

  /**
   * Create a detached, initialised HomeMapsRecord
   */
  def this(week : Integer, level : String, loadout : String, picker : String) = {
    this()

    set(0, week)
    set(1, level)
    set(2, loadout)
    set(3, picker)
  }
}
