/**
 * This class is generated by jOOQ
 */
package zzz.generated.tables


import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.sql.Timestamp
import java.util.Arrays
import java.util.List

import javax.annotation.Generated

import org.jooq.Field
import org.jooq.Identity
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.TableImpl

import scala.Array

import zzz.generated.Keys
import zzz.generated.Scl
import zzz.generated.tables.records.DraftRecord


object Draft {

  /**
   * The reference instance of <code>scl.draft</code>
   */
  val DRAFT = new Draft
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.2"
  ),
  comments = "This class is generated by jOOQ"
)
class Draft(alias : String, aliased : Table[DraftRecord], parameters : Array[ Field[_] ]) extends TableImpl[DraftRecord](alias, Scl.SCL, aliased, parameters, "") {

  /**
   * The class holding records for this type
   */
  override def getRecordType : Class[DraftRecord] = {
    classOf[DraftRecord]
  }

  /**
   * The column <code>scl.draft.id</code>.
   */
  val ID : TableField[DraftRecord, Integer] = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>scl.draft.room_code</code>.
   */
  val ROOM_CODE : TableField[DraftRecord, String] = createField("room_code", org.jooq.impl.SQLDataType.CLOB.nullable(false), "")

  /**
   * The column <code>scl.draft.player1</code>.
   */
  val PLAYER1 : TableField[DraftRecord, String] = createField("player1", org.jooq.impl.SQLDataType.CLOB.nullable(false), "")

  /**
   * The column <code>scl.draft.player2</code>.
   */
  val PLAYER2 : TableField[DraftRecord, String] = createField("player2", org.jooq.impl.SQLDataType.CLOB.nullable(false), "")

  /**
   * The column <code>scl.draft.time</code>.
   */
  val TIME : TableField[DraftRecord, Timestamp] = createField("time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), "")

  /**
   * The column <code>scl.draft.payload</code>.
   */
  val PAYLOAD : TableField[DraftRecord, String] = createField("payload", org.jooq.impl.SQLDataType.CLOB.nullable(false), "")

  /**
   * Create a <code>scl.draft</code> table reference
   */
  def this() = {
    this("draft", null, null)
  }

  /**
   * Create an aliased <code>scl.draft</code> table reference
   */
  def this(alias : String) = {
    this(alias, zzz.generated.tables.Draft.DRAFT, null)
  }

  private def this(alias : String, aliased : Table[DraftRecord]) = {
    this(alias, aliased, null)
  }

  override def getSchema : Schema = Scl.SCL

  override def getIdentity : Identity[DraftRecord, Integer] = {
    Keys.IDENTITY_DRAFT
  }

  override def getPrimaryKey : UniqueKey[DraftRecord] = {
    Keys.KEY_DRAFT_PRIMARY
  }

  override def getKeys : List[ UniqueKey[DraftRecord] ] = {
    return Arrays.asList[ UniqueKey[DraftRecord] ](Keys.KEY_DRAFT_PRIMARY)
  }

  override def as(alias : String) : Draft = {
    new Draft(alias, this)
  }

  /**
   * Rename this table
   */
  def rename(name : String) : Draft = {
    new Draft(name, null)
  }
}
