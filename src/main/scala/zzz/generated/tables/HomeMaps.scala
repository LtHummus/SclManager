/**
 * This class is generated by jOOQ
 */
package zzz.generated.tables


import java.lang.Class
import java.lang.Integer
import java.lang.String

import javax.annotation.Generated

import org.jooq.Field
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.impl.TableImpl

import scala.Array

import zzz.generated.Scl
import zzz.generated.tables.records.HomeMapsRecord


object HomeMaps {

  /**
   * The reference instance of <code>scl.home_maps</code>
   */
  val HOME_MAPS = new HomeMaps
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.2"
  ),
  comments = "This class is generated by jOOQ"
)
class HomeMaps(alias : String, aliased : Table[HomeMapsRecord], parameters : Array[ Field[_] ]) extends TableImpl[HomeMapsRecord](alias, Scl.SCL, aliased, parameters, "") {

  /**
   * The class holding records for this type
   */
  override def getRecordType : Class[HomeMapsRecord] = {
    classOf[HomeMapsRecord]
  }

  /**
   * The column <code>scl.home_maps.week</code>.
   */
  val WEEK : TableField[HomeMapsRecord, Integer] = createField("week", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>scl.home_maps.level</code>.
   */
  val LEVEL : TableField[HomeMapsRecord, String] = createField("level", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), "")

  /**
   * The column <code>scl.home_maps.loadout</code>.
   */
  val LOADOUT : TableField[HomeMapsRecord, String] = createField("loadout", org.jooq.impl.SQLDataType.VARCHAR.length(200).nullable(false), "")

  /**
   * The column <code>scl.home_maps.picker</code>.
   */
  val PICKER : TableField[HomeMapsRecord, String] = createField("picker", org.jooq.impl.SQLDataType.VARCHAR.length(200).nullable(false), "")

  /**
   * Create a <code>scl.home_maps</code> table reference
   */
  def this() = {
    this("home_maps", null, null)
  }

  /**
   * Create an aliased <code>scl.home_maps</code> table reference
   */
  def this(alias : String) = {
    this(alias, zzz.generated.tables.HomeMaps.HOME_MAPS, null)
  }

  private def this(alias : String, aliased : Table[HomeMapsRecord]) = {
    this(alias, aliased, null)
  }

  override def getSchema : Schema = Scl.SCL

  override def as(alias : String) : HomeMaps = {
    new HomeMaps(alias, this)
  }

  /**
   * Rename this table
   */
  def rename(name : String) : HomeMaps = {
    new HomeMaps(name, null)
  }
}
