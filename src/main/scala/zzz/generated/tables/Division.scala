/*
 * This file is generated by jOOQ.
 */
package zzz.generated.tables


import java.lang.Boolean
import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.util.Arrays
import java.util.List

import javax.annotation.Generated

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.TableImpl

import scala.Array

import zzz.generated.Indexes
import zzz.generated.Keys
import zzz.generated.Scl
import zzz.generated.tables.records.DivisionRecord


object Division {

  /**
   * The reference instance of <code>scl.division</code>
   */
  val DIVISION = new Division
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.11.11"
  ),
  comments = "This class is generated by jOOQ"
)
class Division(
  alias : Name,
  child : Table[_ <: Record],
  path : ForeignKey[_ <: Record, DivisionRecord],
  aliased : Table[DivisionRecord],
  parameters : Array[ Field[_] ]
)
extends TableImpl[DivisionRecord](
  alias,
  Scl.SCL,
  child,
  path,
  aliased,
  parameters,
  DSL.comment("")
)
{

  /**
   * The class holding records for this type
   */
  override def getRecordType : Class[DivisionRecord] = {
    classOf[DivisionRecord]
  }

  /**
   * The column <code>scl.division.name</code>.
   */
  val NAME : TableField[DivisionRecord, String] = createField("name", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), "")

  /**
   * The column <code>scl.division.precedence</code>.
   */
  val PRECEDENCE : TableField[DivisionRecord, Integer] = createField("precedence", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), "")

  /**
   * The column <code>scl.division.secret</code>.
   */
  val SECRET : TableField[DivisionRecord, Boolean] = createField("secret", org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("b'0'", org.jooq.impl.SQLDataType.BIT)), "")

  /**
   * The column <code>scl.division.win_points</code>.
   */
  val WIN_POINTS : TableField[DivisionRecord, Integer] = createField("win_points", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("2", org.jooq.impl.SQLDataType.INTEGER)), "")

  /**
   * The column <code>scl.division.draw_points</code>.
   */
  val DRAW_POINTS : TableField[DivisionRecord, Integer] = createField("draw_points", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGER)), "")

  /**
   * The column <code>scl.division.loss_points</code>.
   */
  val LOSS_POINTS : TableField[DivisionRecord, Integer] = createField("loss_points", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), "")

  /**
   * Create a <code>scl.division</code> table reference
   */
  def this() = {
    this(DSL.name("division"), null, null, null, null)
  }

  /**
   * Create an aliased <code>scl.division</code> table reference
   */
  def this(alias : String) = {
    this(DSL.name(alias), null, null, zzz.generated.tables.Division.DIVISION, null)
  }

  /**
   * Create an aliased <code>scl.division</code> table reference
   */
  def this(alias : Name) = {
    this(alias, null, null, zzz.generated.tables.Division.DIVISION, null)
  }

  private def this(alias : Name, aliased : Table[DivisionRecord]) = {
    this(alias, null, null, aliased, null)
  }

  def this(child : Table[_ <: Record], key : ForeignKey[_ <: Record, DivisionRecord]) = {
    this(Internal.createPathAlias(child, key), child, key, zzz.generated.tables.Division.DIVISION, null)
  }

  override def getSchema : Schema = Scl.SCL

  override def getIndexes : List[ Index ] = {
    return Arrays.asList[ Index ](Indexes.DIVISION_PRIMARY)
  }

  override def getPrimaryKey : UniqueKey[DivisionRecord] = {
    Keys.KEY_DIVISION_PRIMARY
  }

  override def getKeys : List[ UniqueKey[DivisionRecord] ] = {
    return Arrays.asList[ UniqueKey[DivisionRecord] ](Keys.KEY_DIVISION_PRIMARY)
  }

  override def as(alias : String) : Division = {
    new Division(DSL.name(alias), this)
  }

  override def as(alias : Name) : Division = {
    new Division(alias, this)
  }

  /**
   * Rename this table
   */
  override def rename(name : String) : Division = {
    new Division(DSL.name(name), null)
  }

  /**
   * Rename this table
   */
  override def rename(name : Name) : Division = {
    new Division(name, null)
  }
}
