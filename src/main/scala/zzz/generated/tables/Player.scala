/*
 * This file is generated by jOOQ.
 */
package zzz.generated.tables


import java.lang.Byte
import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.util.Arrays
import java.util.List

import javax.annotation.Generated

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.TableImpl

import scala.Array

import zzz.generated.Indexes
import zzz.generated.Keys
import zzz.generated.Scl
import zzz.generated.tables.records.PlayerRecord


object Player {

  /**
   * The reference instance of <code>scl.player</code>
   */
  val PLAYER = new Player
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.11.11"
  ),
  comments = "This class is generated by jOOQ"
)
class Player(
  alias : Name,
  child : Table[_ <: Record],
  path : ForeignKey[_ <: Record, PlayerRecord],
  aliased : Table[PlayerRecord],
  parameters : Array[ Field[_] ]
)
extends TableImpl[PlayerRecord](
  alias,
  Scl.SCL,
  child,
  path,
  aliased,
  parameters,
  DSL.comment("")
)
{

  /**
   * The class holding records for this type
   */
  override def getRecordType : Class[PlayerRecord] = {
    classOf[PlayerRecord]
  }

  /**
   * The column <code>scl.player.name</code>.
   */
  val NAME : TableField[PlayerRecord, String] = createField("name", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), "")

  /**
   * The column <code>scl.player.replay_name</code>.
   */
  val REPLAY_NAME : TableField[PlayerRecord, String] = createField("replay_name", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), "")

  /**
   * The column <code>scl.player.division</code>.
   */
  val DIVISION : TableField[PlayerRecord, String] = createField("division", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), "")

  /**
   * The column <code>scl.player.wins</code>.
   */
  val WINS : TableField[PlayerRecord, Integer] = createField("wins", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), "")

  /**
   * The column <code>scl.player.draws</code>.
   */
  val DRAWS : TableField[PlayerRecord, Integer] = createField("draws", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), "")

  /**
   * The column <code>scl.player.losses</code>.
   */
  val LOSSES : TableField[PlayerRecord, Integer] = createField("losses", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), "")

  /**
   * The column <code>scl.player.country</code>.
   */
  val COUNTRY : TableField[PlayerRecord, String] = createField("country", org.jooq.impl.SQLDataType.CHAR(2), "")

  /**
   * The column <code>scl.player.participating</code>.
   */
  val PARTICIPATING : TableField[PlayerRecord, Byte] = createField("participating", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), "")

  /**
   * The column <code>scl.player.active</code>.
   */
  val ACTIVE : TableField[PlayerRecord, Byte] = createField("active", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), "")

  /**
   * Create a <code>scl.player</code> table reference
   */
  def this() = {
    this(DSL.name("player"), null, null, null, null)
  }

  /**
   * Create an aliased <code>scl.player</code> table reference
   */
  def this(alias : String) = {
    this(DSL.name(alias), null, null, zzz.generated.tables.Player.PLAYER, null)
  }

  /**
   * Create an aliased <code>scl.player</code> table reference
   */
  def this(alias : Name) = {
    this(alias, null, null, zzz.generated.tables.Player.PLAYER, null)
  }

  private def this(alias : Name, aliased : Table[PlayerRecord]) = {
    this(alias, null, null, aliased, null)
  }

  def this(child : Table[_ <: Record], key : ForeignKey[_ <: Record, PlayerRecord]) = {
    this(Internal.createPathAlias(child, key), child, key, zzz.generated.tables.Player.PLAYER, null)
  }

  override def getSchema : Schema = Scl.SCL

  override def getIndexes : List[ Index ] = {
    return Arrays.asList[ Index ](Indexes.PLAYER_FK_LEAGUE, Indexes.PLAYER_PRIMARY)
  }

  override def getPrimaryKey : UniqueKey[PlayerRecord] = {
    Keys.KEY_PLAYER_PRIMARY
  }

  override def getKeys : List[ UniqueKey[PlayerRecord] ] = {
    return Arrays.asList[ UniqueKey[PlayerRecord] ](Keys.KEY_PLAYER_PRIMARY)
  }

  override def getReferences : List[ ForeignKey[PlayerRecord, _] ] = {
    return Arrays.asList[ ForeignKey[PlayerRecord, _] ](Keys.FK_LEAGUE)
  }

  def division : Division = {
    return new Division(this, Keys.FK_LEAGUE)
  }

  override def as(alias : String) : Player = {
    new Player(DSL.name(alias), this)
  }

  override def as(alias : Name) : Player = {
    new Player(alias, this)
  }

  /**
   * Rename this table
   */
  override def rename(name : String) : Player = {
    new Player(DSL.name(name), null)
  }

  /**
   * Rename this table
   */
  override def rename(name : Name) : Player = {
    new Player(name, null)
  }
}
